// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["filteredRelationCount"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma" // default "native" mode not supported by PlanetScale (to be exact, foreign key constraints are not supported - more info: https://www.prisma.io/docs/guides/database/using-prisma-with-planetscale#differences-to-consider)
}

model Artist {
    id           String             @id @default(cuid())
    name         String
    genres       Genre[]
    imgUrl       String?
    thumbnailUrl String?
    tracks       TrackArtistEntry[]
    albums       AlbumArtistEntry[]
}

model Genre {
    label   String   @id @default(cuid())
    artists Artist[]
}

model Album {
    id                   String             @id @default(cuid())
    name                 String
    type                 String
    releaseDate          DateTime
    releaseDatePrecision String
    imgUrl               String?
    thumbnailUrl         String?
    artists              AlbumArtistEntry[]
    tracks               Track[]
    label                String
}

model AlbumArtistEntry {
    artistId String
    artist   Artist @relation(fields: [artistId], references: [id])
    rank     Int
    albumId  String
    album    Album  @relation(fields: [albumId], references: [id])

    @@id([artistId, albumId], name: "albumFeatureId")
    @@index([albumId])
    @@index([artistId])
}

model TrackArtistEntry {
    artistId String
    artist   Artist @relation(fields: [artistId], references: [id])
    rank     Int
    trackId  String
    track    Track  @relation(fields: [trackId], references: [id])

    @@id([artistId, trackId], name: "trackFeatureId")
    @@index([trackId])
    @@index([artistId])
}

model Track {
    id                  String              @id @default(cuid())
    name                String
    featuringArtists    TrackArtistEntry[]
    countryChartEntries CountryChartEntry[]
    globalChartEntries  GlobalChartEntry[]
    explicit            Boolean
    previewUrl          String?
    albumId             String
    album               Album               @relation(fields: [albumId], references: [id])
    isrc                String
    isrcYear            Int
    isrcAgency          String
    isrcTerritory       String
    danceability        Float
    energy              Float
    key                 Float
    loudness            Float
    mode                Int
    speechiness         Float
    acousticness        Float
    instrumentalness    Float
    liveness            Float
    valence             Float
    tempo               Float
    durationMs          Float
    timeSignature       Int

    @@index([albumId])
}

model Country {
    name         String              @id @default(cuid())
    isoAlpha3    String
    isoAlpha2    String
    geoRegion    String
    geoSubregion String
    chartEntries CountryChartEntry[]
}

model CountryChartEntry {
    id          String   @id @default(cuid())
    country     Country  @relation(fields: [countryName], references: [name])
    countryName String
    track       Track    @relation(fields: [trackId], references: [id])
    trackId     String
    date        DateTime
    rank        Int
    streams     Float

    @@unique([countryName, trackId, date], name: "chartEntryId")
    @@index([countryName])
    @@index([trackId])
}

model GlobalChartEntry {
    id      String   @id @default(cuid())
    track   Track    @relation(fields: [trackId], references: [id])
    trackId String
    date    DateTime
    rank    Int
    streams Float

    @@unique([trackId, date], name: "chartEntryId")
}
